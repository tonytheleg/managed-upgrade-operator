// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/managed-upgrade-operator/pkg/ocm (interfaces: OcmClientBuilder)

// Package mocks is a generated GoMock package.
package mocks

import (
	url "net/url"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ocm "github.com/openshift/managed-upgrade-operator/pkg/ocm"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockOcmClientBuilder is a mock of OcmClientBuilder interface.
type MockOcmClientBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockOcmClientBuilderMockRecorder
}

// MockOcmClientBuilderMockRecorder is the mock recorder for MockOcmClientBuilder.
type MockOcmClientBuilderMockRecorder struct {
	mock *MockOcmClientBuilder
}

// NewMockOcmClientBuilder creates a new mock instance.
func NewMockOcmClientBuilder(ctrl *gomock.Controller) *MockOcmClientBuilder {
	mock := &MockOcmClientBuilder{ctrl: ctrl}
	mock.recorder = &MockOcmClientBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOcmClientBuilder) EXPECT() *MockOcmClientBuilderMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockOcmClientBuilder) New(arg0 client.Client, arg1 *url.URL) (ocm.OcmClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", arg0, arg1)
	ret0, _ := ret[0].(ocm.OcmClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockOcmClientBuilderMockRecorder) New(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockOcmClientBuilder)(nil).New), arg0, arg1)
}
