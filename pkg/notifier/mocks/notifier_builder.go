// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/managed-upgrade-operator/pkg/notifier (interfaces: NotifierBuilder)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	configmanager "github.com/openshift/managed-upgrade-operator/pkg/configmanager"
	notifier "github.com/openshift/managed-upgrade-operator/pkg/notifier"
	upgradeconfigmanager "github.com/openshift/managed-upgrade-operator/pkg/upgradeconfigmanager"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockNotifierBuilder is a mock of NotifierBuilder interface.
type MockNotifierBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierBuilderMockRecorder
}

// MockNotifierBuilderMockRecorder is the mock recorder for MockNotifierBuilder.
type MockNotifierBuilderMockRecorder struct {
	mock *MockNotifierBuilder
}

// NewMockNotifierBuilder creates a new mock instance.
func NewMockNotifierBuilder(ctrl *gomock.Controller) *MockNotifierBuilder {
	mock := &MockNotifierBuilder{ctrl: ctrl}
	mock.recorder = &MockNotifierBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifierBuilder) EXPECT() *MockNotifierBuilderMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockNotifierBuilder) New(arg0 client.Client, arg1 configmanager.ConfigManagerBuilder, arg2 upgradeconfigmanager.UpgradeConfigManagerBuilder) (notifier.Notifier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", arg0, arg1, arg2)
	ret0, _ := ret[0].(notifier.Notifier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockNotifierBuilderMockRecorder) New(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockNotifierBuilder)(nil).New), arg0, arg1, arg2)
}
